{
module Lex

open Ast
open Microsoft.FSharp.Text.Lexing
open Parse
open Parse_util
open System.Numerics

type lex_mode =
| LexNormal
| LexVerbatim // after end-of-line, start reading verbatim lines

let mode = ref LexNormal

let init_lex () = mode := LexNormal

let macros = ref (Map.empty:Map<string,token list>)
let lexeme (lexbuf:LexBuffer<_>):(string) = System.Text.Encoding.ASCII.GetString lexbuf.Lexeme
let next_line (lexbuf:LexBuffer<_>) = lexbuf.EndPos <- lexbuf.EndPos.NextLine

// Note: main.fs may need to clear/save/restore this if we decide to support include files
let custom_tokens = ref (Map.empty:Map<string, (loc -> token)>)

let operatorToken (tok:string) (isCustom:bool) (s:string):(loc -> token) option =
  match tok with
  | "!" -> Some (fun loc -> BANG (loc, (isCustom, s)))
  | "*" -> Some (fun loc -> STAR (loc, (isCustom, s)))
  | "/" -> Some (fun loc -> SLASH (loc, (isCustom, s)))
  | "%" -> Some (fun loc -> PERCENT (loc, (isCustom, s)))
  | "+" -> Some (fun loc -> PLUS (loc, (isCustom, s)))
  | "-" -> Some (fun loc -> MINUS (loc, (isCustom, s)))
  | "<" -> Some (fun loc -> LT (loc, (isCustom, s)))
  | ">" -> Some (fun loc -> GT (loc, (isCustom, s)))
  | "=" -> Some (fun loc -> EQ (loc, (isCustom, s)))
  | "|" -> Some (fun loc -> BAR (loc, (isCustom, s)))
  | ":=" -> Some (fun loc -> COLONEQ (loc, (isCustom, s)))

  | ".." -> Some (fun loc -> DOTDOT (loc, (isCustom, s)))

  | "@=" -> Some (fun loc -> ATEQ (loc, (isCustom, s)))
  | "<=" -> Some (fun loc -> LE (loc, (isCustom, s)))
  | ">=" -> Some (fun loc -> GE (loc, (isCustom, s)))
  | "==" -> Some (fun loc -> EQEQ (loc, (isCustom, s)))
  | "!=" -> Some (fun loc -> NE (loc, (isCustom, s)))
  | "&&" -> Some (fun loc -> AMPAMP (loc, (isCustom, s)))
  | "||" -> Some (fun loc -> BARBAR (loc, (isCustom, s)))
  | "<==" -> Some (fun loc -> LTEQEQ (loc, (isCustom, s)))
  | "==>" -> Some (fun loc -> EQEQGT (loc, (isCustom, s)))
  | "<==>" -> Some (fun loc -> LTEQEQGT (loc, (isCustom, s)))
  | _ -> None

}

let op_char = ['!''%''+''-''&''^''|''<''>''=''.''#'':''$''?''`''~''@''\\']
let op = (op_char | '*' | '/' op_char)+ ('/' | "//" | "/*")?

rule comment = parse
| "*/" { () }
| "/*" { comment lexbuf ; comment lexbuf }
| "\n\r" { next_line lexbuf; comment lexbuf }
| "\r\n" { next_line lexbuf; comment lexbuf }
| ['\n''\r'] { next_line lexbuf; comment lexbuf }
| _ { comment lexbuf }
and preprocess_skip deep = parse
| "#else" { if deep then preprocess_skip deep lexbuf else () }
| "#endif" { () }
| "#ifdef" { preprocess_skip true lexbuf; preprocess_skip deep lexbuf }
| "#ifndef" { preprocess_skip true lexbuf; preprocess_skip deep lexbuf }
| "\n\r" { next_line lexbuf; preprocess_skip deep lexbuf }
| "\r\n" { next_line lexbuf; preprocess_skip deep lexbuf }
| ['\n''\r'] { next_line lexbuf; preprocess_skip deep lexbuf }
| _ { preprocess_skip deep lexbuf }
and skip_line = parse
| [^'\n''\r']*  {()}
and file_name = parse
| [' ']*[^' ''\n''\r']+[^'\n''\r']* { lextoken lexbuf }
| [^'\n''\r']* { lextoken lexbuf }
and line_number = parse
| ['0'-'9']+ { file_name lexbuf }
and verbatim lines line = parse
| "\n\r" { next_line lexbuf; verbatim (line::lines) "" lexbuf }
| "\r\n" { next_line lexbuf; verbatim (line::lines) "" lexbuf }
| ['\n''\r'] { next_line lexbuf; verbatim (line::lines) "" lexbuf }
| [^'\n''\r']*
{
  mode := LexNormal;
  let s = (lexeme lexbuf) in
  if s.Trim().StartsWith("#endverbatim") then VERBATIM_BLOCK (List.rev lines)
  else verbatim lines s lexbuf
}
and end_line = parse
| "\n\r" { next_line lexbuf; lextoken lexbuf }
| "\r\n" { next_line lexbuf; lextoken lexbuf }
| ['\n''\r'] { next_line lexbuf; lextoken lexbuf }
and lextoken = parse
| "\n\r" { next_line lexbuf; match !mode with LexNormal -> lextoken lexbuf | LexVerbatim -> verbatim [] "" lexbuf }
| "\r\n" { next_line lexbuf; match !mode with LexNormal -> lextoken lexbuf | LexVerbatim -> verbatim [] "" lexbuf }
| ['\n''\r'] { next_line lexbuf; match !mode with LexNormal -> lextoken lexbuf | LexVerbatim -> verbatim [] "" lexbuf }
| [' ']+ { lextoken lexbuf }
| "//"[^'\n''\r']* { lextoken lexbuf }
| "#line"[' ']+ { line_number lexbuf }
| "/*" { comment lexbuf ; lextoken lexbuf }
| "#ifdef"[' ']+['A'-'Z''a'-'z''0'-'9''_''$''?']+
{
  let s = lexeme lexbuf in
  let x = s.Substring("#ifdef".Length).Trim() in
  if Map.containsKey x !macros then lextoken lexbuf else (preprocess_skip false lexbuf ; lextoken lexbuf)
}
| "#ifndef"[' ']+['A'-'Z''a'-'z''0'-'9''_''$''?']+
{
  let s = lexeme lexbuf in
  let x = s.Substring("#ifndef".Length).Trim() in
  if not (Map.containsKey x !macros) then lextoken lexbuf else (preprocess_skip false lexbuf ; lextoken lexbuf)
}
| "#else" { preprocess_skip false lexbuf ; lextoken lexbuf }
| "#endif" { lextoken lexbuf }
| "#token"[' ']+[^' ''\n''\r']+[' ']+"precedence"[' ']+[^' ''\n''\r']+[' ']*
{
  let s = lexeme lexbuf in
  let s = s.Replace(" ", "") in
  let sp = "precedence" in
  let i1 = "#token".Length in
  let i2 = s.IndexOf(sp) in
  let name = s.Substring(i1, i2 - i1) in
  let prec = s.Substring(i2 + sp.Length) in
  ( match operatorToken prec true name with
    | None -> parse_err ("unknown precedence: '" + prec + "'")
    | Some f -> custom_tokens := Map.add name f !custom_tokens);
  end_line lexbuf
}
| "#verbatim" { mode := LexVerbatim; VERBATIM (curLoc lexbuf) }
| ";" { SEMI (curLoc lexbuf) }
| "(" { LPAREN (curLoc lexbuf) }
| ")" { RPAREN (curLoc lexbuf) }
| "?[" { QLBRACKET (curLoc lexbuf) }
| "#[" { HASHLBRACKET (curLoc lexbuf) }
| "[" { LBRACKET (curLoc lexbuf) }
| "]" { RBRACKET (curLoc lexbuf) }
| "{:" { LBRACECOLON (curLoc lexbuf) }
| "{" { LBRACE (curLoc lexbuf) }
| "}" { RBRACE (curLoc lexbuf) }
| "," { COMMA (curLoc lexbuf) }
| "/" { SLASH (curLoc lexbuf, (false, "/")) }
| op
  {
    let s = lexeme lexbuf in
    let loc = curLoc lexbuf in
    let op_tok s = 
      match (s, operatorToken s false s, Map.tryFind s !custom_tokens) with
      | ("@", _, _) -> AT loc
      | ("#", _, _) -> HASH loc
      | (".", _, _) -> DOT loc
      | (":", _, _) -> COLON loc
      | ("->", _, _) -> MINUSGT loc
      | (_, None, None) -> parse_err ("unknown token '" + s + "'")
      | (_, None, Some f) -> f loc
      | (_, Some f, _) -> f loc
    in
    match s with
    | s when s.EndsWith("/*") -> 
      let s = s.Substring(0, s.Length - 2) in comment lexbuf; op_tok s
    | s when s.EndsWith("//") -> 
      let s = s.Substring(0, s.Length - 2) in skip_line lexbuf; op_tok s
    | _ -> op_tok s
  }
| "Type" { TTYPE (curLoc lexbuf) }
| "type" { TYPE (curLoc lexbuf) }
| "Dependent" { DDEPENDENT (curLoc lexbuf) }
| "dependent" { DEPENDENT (curLoc lexbuf) }
| "const" { CONST (curLoc lexbuf) }
| "readonly" { READONLY (curLoc lexbuf) }
| "function" { FUNCTION (curLoc lexbuf) }
| "returns" { RETURNS (curLoc lexbuf) }
| "axiom" { AXIOM (curLoc lexbuf) }
| "extern" { EXTERN (curLoc lexbuf) }
| "procedure" { PROCEDURE (curLoc lexbuf) }
| "lets" { LETS (curLoc lexbuf) }
| "requires" { REQUIRES (curLoc lexbuf) }
| "ensures" { ENSURES (curLoc lexbuf) }
| "reads" { READS (curLoc lexbuf) }
| "modifies" { MODIFIES (curLoc lexbuf) }
| "preserves" { PRESERVES (curLoc lexbuf) }
| "decreases" { DECREASES (curLoc lexbuf) }
| "invariant" { INVARIANT (curLoc lexbuf) }
| "assert" { ASSERT (curLoc lexbuf) }
| "implies" { IMPLIES (curLoc lexbuf) }
| "by" { BY (curLoc lexbuf) }
| "assume" { ASSUME (curLoc lexbuf) }
| "calc" { CALC (curLoc lexbuf) }
| "havoc" { HAVOC (curLoc lexbuf) }
| "goto" { GOTO (curLoc lexbuf) }
| "lemma" { LEMMA (curLoc lexbuf) }
| "call" { CALL (curLoc lexbuf) }
| "forall" { FORALL (curLoc lexbuf) }
| "exists" { EXISTS (curLoc lexbuf) }
| "fun" { FUN (curLoc lexbuf) }
| "old" { OLD (curLoc lexbuf) }
| "this" { THIS (curLoc lexbuf) }
| "true" { LITBOOL ((curLoc lexbuf), true) }
| "false" { LITBOOL ((curLoc lexbuf), false) }
| "is" { IS (curLoc lexbuf) }
| "let" { LET (curLoc lexbuf) }
| "in" { IN (curLoc lexbuf) }
| "out" { OUT (curLoc lexbuf) }
| "inout" { INOUT (curLoc lexbuf) }
| "var" { VAR (curLoc lexbuf) }
| "if" { IF (curLoc lexbuf) }
| "then" { THEN (curLoc lexbuf) }
| "else" { ELSE (curLoc lexbuf) }
| "while" { WHILE (curLoc lexbuf) }
| "for" { FOR (curLoc lexbuf) }
| "return" { RETURN (curLoc lexbuf) }
| "reveal" { REVEAL (curLoc lexbuf) }
| "static" { STATIC (curLoc lexbuf) }
| "module" { MODULE (curLoc lexbuf) }
| "import" { IMPORT (curLoc lexbuf) }
| "ghost" { GHOST (curLoc lexbuf) }
| "inline" { INLINE (curLoc lexbuf) }
| "operator" { OPERATOR (curLoc lexbuf) }
| "include" { INCLUDE (curLoc lexbuf) }
| "operand_type" { OPERAND_TYPE (curLoc lexbuf) }
| "tuple" { TUPLE (curLoc lexbuf) }
| "bool" { BOOL (curLoc lexbuf) }
| "prop" { PROP (curLoc lexbuf) }
| "int" { INT (curLoc lexbuf) }
| "int_range" { INT_RANGE (curLoc lexbuf) }
(*| "bv"['0'-'9']+ { BV ((curLoc lexbuf), System.Int32.Parse((lexeme lexbuf).Substring(2))) }*)
| ['"'][^'"''\n''\r''\t''\\']*['"'] { let s = lexeme lexbuf in STRING (curLoc lexbuf, s.Substring(1, s.Length - 2)) }
| "0x"['0'-'9''a'-'f''A'-'F']['0'-'9''a'-'f''A'-'F''_']*
  {
    let s = lexeme lexbuf in
    let s = s.Replace("_", "") in
    let s = s.Substring(2, String.length s - 2) in
    let explode (s:string) = [for c in s -> c] in
    let digits = List.map (int << System.Char.ToLowerInvariant) (explode s) in
    let rec hex digits n =
      match digits with
      | [] -> n
      | h::t ->
          let d = if h >= (int 'a') then h - (int 'a') + 10 else h - (int '0') in
          hex t (bigint.Add (bigint d, bigint.Multiply (bigint 16, n))) in
    LITINT ((curLoc lexbuf), hex digits bigint.Zero)
  }
| ['0'-'9']['0'-'9''_']* { LITINT ((curLoc lexbuf), bigint.Parse((lexeme lexbuf).Replace("_", ""))) }
| ['0'-'9']+['.']['0'-'9']+ { LITREAL ((curLoc lexbuf), lexeme lexbuf) }
(* TODO: we parse _"..." into ..., which is correct, but the Vale printer (not the Dafny/F* printers) also needs to print ... as _"..." when ... is a Vale keyword *)
| "_"['"'][^'"''\n''\r''\t''\\']*['"'] { let s = lexeme lexbuf in ID (curLoc lexbuf, s.Substring(2, s.Length - 3)) }
| ['_''a'-'z''A'-'Z''\'']+['_''a'-'z''A'-'Z''0'-'9''\'']* { ID (curLoc lexbuf, lexeme lexbuf) }
| eof { EOF }
| '\000' { EOF }
| _ { parse_err ("cannot parse character: \"" ^ (lexeme lexbuf) ^ "\"" ^ "\n(ascii code " ^ (string (int ((lexeme lexbuf).Chars 0))) ^ ")") }

