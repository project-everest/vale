include "../../../src/arch/x64/X64.Vale.InsBasic.vaf"

module Quick

#verbatim{:interface}{:implementation}
open Words_s
open X64.Machine_s
open X64.Vale
open X64.Vale.State_i
open X64.Vale.Decls_i
open X64.Vale.InsBasic
open X64.Vale.QuickCode_i
open X64.Vale.QuickCodes_i
#endverbatim

/*
#verbatim
[@"opaque_to_smt" va_qattr]
let codes_bench : codes = [
  va_code_Add64 (OReg Rax) (OConst 1);
  va_code_Add64 (OReg Rax) (OConst 1);
  va_code_Add64 (OReg Rax) (OConst 1);
  va_code_Add64 (OReg Rax) (OConst 1);
  va_code_Add64 (OReg Rax) (OConst 1);

  va_code_Add64 (OReg Rax) (OConst 1);
  va_code_Add64 (OReg Rax) (OConst 1);
  va_code_Add64 (OReg Rax) (OConst 1);
  va_code_Add64 (OReg Rax) (OConst 1);
  va_code_Add64 (OReg Rax) (OConst 1);

  va_code_Add64 (OReg Rax) (OConst 1);
  va_code_Add64 (OReg Rax) (OConst 1);
  va_code_Add64 (OReg Rax) (OConst 1);
  va_code_Add64 (OReg Rax) (OConst 1);
  va_code_Add64 (OReg Rax) (OConst 1);

  va_code_Add64 (OReg Rax) (OConst 1);
  va_code_Add64 (OReg Rax) (OConst 1);
  va_code_Add64 (OReg Rax) (OConst 1);
  va_code_Add64 (OReg Rax) (OConst 1);
  va_code_Add64 (OReg Rax) (OConst 1);
  ]

[@"opaque_to_smt" va_qattr]
let wpCodes_bench : quickCodes unit codes_bench =
  QSeq (va_quick_Add64 (OReg Rax) (OConst 1)) (
  QSeq (va_quick_Add64 (OReg Rax) (OConst 1)) (
  QSeq (va_quick_Add64 (OReg Rax) (OConst 1)) (
  QSeq (va_quick_Add64 (OReg Rax) (OConst 1)) (
  QSeq (va_quick_Add64 (OReg Rax) (OConst 1)) (

  QSeq (va_quick_Add64 (OReg Rax) (OConst 1)) (
  QSeq (va_quick_Add64 (OReg Rax) (OConst 1)) (
  QSeq (va_quick_Add64 (OReg Rax) (OConst 1)) (
  QSeq (va_quick_Add64 (OReg Rax) (OConst 1)) (
  QSeq (va_quick_Add64 (OReg Rax) (OConst 1)) (

  QSeq (va_quick_Add64 (OReg Rax) (OConst 1)) (
  QSeq (va_quick_Add64 (OReg Rax) (OConst 1)) (
  QSeq (va_quick_Add64 (OReg Rax) (OConst 1)) (
  QSeq (va_quick_Add64 (OReg Rax) (OConst 1)) (
  QSeq (va_quick_Add64 (OReg Rax) (OConst 1)) (

  QSeq (va_quick_Add64 (OReg Rax) (OConst 1)) (
  QSeq (va_quick_Add64 (OReg Rax) (OConst 1)) (
  QSeq (va_quick_Add64 (OReg Rax) (OConst 1)) (
  QSeq (va_quick_Add64 (OReg Rax) (OConst 1)) (
  QSeq (va_quick_Add64 (OReg Rax) (OConst 1)) (

  QEmpty ()
  )))))
  )))))
  )))))
  )))))

//#reset-options "--debug Quick --debug_level SMTQuery"

let lemma_bench1 (s0:state) : Ghost (state * fuel)
  (requires
    s0.ok /\
    s0.regs Rax < 100
  )
  (ensures fun (sN, f0) ->
    eval (Block codes_bench) s0 f0 sN /\
    sN.ok /\
    sN.regs Rax == s0.regs Rax + 20 /\
    va_state_eq sN (va_update_reg Rax sN (va_update_flags sN s0))
  )
  =
(*
  let (sN, f0, ()) = wp_sound_norm codes_bench wpCodes_bench s0
    (fun s0 sN () ->
      sN.ok /\
      sN.regs Rax == s0.regs Rax + 20 /\
      va_state_match sN (va_update_reg Rax sN (va_update_flags sN s0))
    )
    in
*)
  let (sN, f0, ()) = wp_run_norm codes_bench wpCodes_bench s0
    (fun (s0:state) (sN:state) -> va_update_reg Rax sN (va_update_flags sN s0))
    (fun (sN:state) (sN':state) -> eval_reg Rax sN == eval_reg Rax sN' /\ sN.flags == sN'.flags)
    in
//  let (sN, f0, ()) = wp_run_norm codes_bench wpCodes_bench s0 in
  (sN, f0)
//#reset-options ""
#endverbatim
*/

#verbatim{:interface}
let rec self_int (i:int) : int = if i <= 0 then i else 1 + self_int (i - 1)
#endverbatim

#verbatim
let rec lemma_self_int (i:int) : Lemma
  (requires 0 <= i)
  (ensures self_int i == i)
  =
  if 0 < i then lemma_self_int (i - 1)

let va_assert (p:Type0) : Lemma (requires p) (ensures p) = ()
let va_assume (p:Type0) : Lemma (requires True) (ensures p) = assume p
#endverbatim

procedure{:quick exportOnly} Add64Ghosts(
        inout dst:dst_opr64,
        src:opr64,
        inline i:int,
        ghost b:buffer64,
        ghost g1:int,
        ghost g2:int)
    returns(
        ghost h1:int,
        ghost h2:int)
    modifies
        efl;
    requires
        i > 2;
        g1 == src;
        g2 > 3;
        src + dst < pow2_64;
    ensures
        h1 == g1;
        h2 > 4;
        dst == old(dst + src);
{
    h1 := g1;
    h2 := g2 + 1;
    Add64(dst, src);
}

#verbatim
let ghostId (x:int) : GTot int = x
#endverbatim
//#reset-options "--debug Quick --debug_level SMTQuery"
procedure{:quick} Bump3(inline b:bool, ghost g1:int) returns(ghost g2:int)
    modifies
        efl;
        rax;
    requires
        rax < 100;
        g1 == rax;
    ensures
        rax == old(rax) + self_int(3);
        g2 == old(rax);
{
    inline if (b)
    {
        Add64(rax, 1);
        Add64(rax, 1);
    }
    else
    {
        Add64(rax, 2);
    }
    assert self_int(3) == 3 by { lemma_self_int(ghostId(3)); }
    lemma_self_int(g1 + 1);
    lemma_self_int(old(rax));
    assert rax == old(rax) + 2;
    ghost var gtmp := g1 + rax;
    g2 := 0 - rax;
    if (rax < 7)
    {
        Add64(rax, 1);
        Add64(rax, 0);
        g2 := g2 + gtmp;
        gtmp := gtmp + 1;
    }
    else
    {
        Add64(rax, 0);
        Add64(rax, 1);
        g2 := g2 + gtmp;
        gtmp := gtmp + 1;
    }
    assert gtmp == g1 + rax;
    assert g2 == old(rax);
}
#reset-options

procedure{:quick} CallBump3(inline b:bool, ghost g1:int) returns(ghost g2:int)
    modifies
        efl;
        rax;
    requires
        rax < 100;
        g1 == rax;
    ensures
        rax == old(rax) + self_int(3);
        g2 == old(rax);
{
    Add64(rax, 0);
    g2 := Bump3(b, if rax < 7 then (let r:int := rax in r) else g1 + 0);
}

procedure{:quick} AddRaxG(ghost g:int)
    modifies
        efl;
        rax;
    requires
        rax < 200;
        g == rax;
    ensures
        rax == old(rax) + 1;
{
    Add64(rax, 1);
}

procedure Incr3(ghost g:int)
    modifies
        efl;
        rax;
    requires
        rax < 100;
        g == rax;
    ensures
        rax == old(rax) + 3;
{
    assert{:quick_start} true;
    Add64(rax, 1);
    AddRaxG(g + 1);
    Add64(rax, 1);
}

procedure{:quick} While(ghost g1:int) returns(ghost go:int)
    modifies
        efl;
        rax; rbx;
    requires
        rax < 200;
        rbx < 100;
{
    Add64(rax, 0);
    let gc := g1;
    ghost var g2:int := rax;
    while (rax < rbx)
        invariant
            rax <= 200;
            rbx <= 100;
            g2 == rax;
            g2 >= old(g2);
            rax >= old(rax);
            g1 == old(g1);
        decreases
            (200 - rax);
    {
        Add64(rax, 1);
        g2 := g2 + 1;
    }
    assert g2 == rax;
    Add64(rax, 3);
    go := g2 + gc;
}

procedure{:quick} TestAssertTyping(ghost i:int) returns(ghost j:nat)
    requires
        i >= 0;
{
    assert{:quick_type} i >= 0;
    assert{:quick_type} i >= 0;
    j := i;
}
