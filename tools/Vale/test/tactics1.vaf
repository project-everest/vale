// Expects Vale flags: -fstarText -conciseLemmas=false

var{:state ok()} ok:bool;
var{:state reg(EAX)} eax:int;
var{:state reg(EBX)} ebx:int;
var{:state flags()} efl:int;
var{:state mem()} mem:int;

module Tactics1

#verbatim
open FStar.Tactics

(*
module Map=FStar.Map
let map = Map.t
let op_String_Access = Map.sel
let op_String_Assignment = Map.upd
let contains = Map.contains
*)

type reg = | EAX | EBX
type reg_int_map = int * int
let op_String_Access (a, b) r = match r with EAX -> a | EBX -> b
let op_String_Assignment (a, b) r i = match r with EAX -> (i, b) | EBX -> (a, i)

type va_bool = bool
type va_int = int
type ins = | IPlaceholder : int -> ins
type va_code = | Block : block:va_codes -> va_code | Ins : ins:ins -> va_code
 and va_codes = list va_code

let va_CNil () = []
let va_CCons x y = x::y
let va_Block (block:va_codes) : Tot va_code = Block block
let va_get_block (c:va_code{Block? c}) : GTot va_codes = Block?.block c

type va_state = reg_int_map
let va_get_ok (s:va_state) : GTot Type = True
let va_get_reg (r:reg) (s:va_state) : GTot int = s.[r]
let va_update_ok (sM:va_state) (sK:va_state) : GTot va_state = sK
let va_update_reg (r:reg) (sM:va_state) (sK:va_state) : GTot va_state = sK.[r] <- sM.[r]

type va_register = reg
let va_op_register_reg (r:reg) : Tot va_register = r
let va_is_src_reg (r:reg) (s:va_state) = True
let va_is_dst_reg (r:reg) (s:va_state) = True
let va_update_register (r:reg) (sM:va_state) (sK:va_state) : GTot va_state = va_update_reg r sM sK
let va_eval_reg (s:va_state) (r:va_register) : GTot int = s.[r]

let va_state_eq (s0:va_state) (s1:va_state) : Type = s0.[EAX] = s1.[EAX] /\ s0.[EBX] = s1.[EBX]

let va_require (b0:va_codes) (c:va_code) (s0:va_state) (sN:va_state) : Type =
    Cons? b0
 /\ Cons?.hd b0 = c

let va_ensure (b0:va_codes) (s0:va_state) (s1:va_state) (sN:va_state) : Type =
    True

let va_block_head = Cons?.hd
let va_block_tail = Cons?.tl

assume val va_lemma_block : c1:va_code -> b1:va_codes -> s0:va_state -> sN:va_state -> Ghost (s1:va_state)
  (requires True)
  (ensures (fun s1 -> True))

assume val va_lemma_empty : s0:va_state -> sN:va_state -> Ghost (sM:va_state)
  (requires True)
  (ensures (fun sM -> s0 == sM /\ sM == sN))

#endverbatim




procedure{:tactic smt} Imm(out register x:int, inline y:int)
    ensures
        x == y;
{
    assume false;
}

procedure{:tactic smt} Increment(inout register x:int)
    ensures
        x == old(x) + 1;
{
    assume false;
}

procedure{:tactic smt} Add(inout register x:int, register y:int)
    ensures
        x == old(x + y);
{
    assume false;
}

procedure{:tactic smt} AddReg(inout register x:int, register y:int)
    ensures
        x == old(x + y);
{
    Add(x, y); // coerces y from register to operand
}

procedure{:tactic smt} p()
    modifies
        eax;
    requires
        eax >= 0;
    ensures
        eax >= 2;
{
    Increment(eax);
    Increment(eax);
}

#verbatim
let double (x:int):int = x + x
#endverbatim

procedure{:tactic smt} Calls()
    modifies
        eax; ebx;
    ensures
        eax == old(eax) + 3;
{
    Increment(eax);
    Imm(ebx, double(1));
    assert ebx == 2;
    assert ebx != 777;
    Add(eax, ebx);
}

procedure{:tactic smt} Ghosts(ghost g1:int) returns(ghost g2:int)
    ensures
        g2 == g1 + 1;
{
    g2 := g1 + 1;
}

