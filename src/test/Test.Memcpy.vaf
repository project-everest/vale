include "../arch/x64/X64.Vale.InsBasic.vaf"
include "../arch/x64/X64.Vale.InsMem.vaf"

module Test.Memcpy

#verbatim{:interface}{:implementation}
module M = Memory_i_s
open X64.Machine_s
open X64.Vale.State_i
open X64.Vale.Decls_i
open X64.Vale.InsBasic
open X64.Vale.InsMem
//open X64.Vale.StrongPost_i
#endverbatim

#reset-options "--z3rlimit 20"

procedure Copy16(ghost bsrc:buffer64, ghost bdst:buffer64)
    requires/ensures
        locs_disjoint(list(loc_buffer(bsrc), loc_buffer(bdst)));
        buffer_readable(mem, bsrc);
        buffer_readable(mem, bdst);
        buffer_length(bsrc) == 2;
        buffer_length(bdst) == 2;
        rsi == buffer_addr(bsrc);
        rdi == buffer_addr(bdst);
    ensures
        forall i :: 0 <= i && i < 2 ==> buffer64_read(bdst, i, mem) == buffer64_read(bsrc, i, mem);
        modifies_mem(loc_buffer(bdst), old(mem), mem);
    reads
        rsi; rdi;
    modifies
        rax; rbx;
        mem;
{
//    assert{:fast_block} true;
    Load64_buffer(rax, rsi, 0, bsrc, 0);
    Load64_buffer(rbx, rsi, 8, bsrc, 1);
    Store64_buffer(rdi, rax, 0, bdst, 0);
    Store64_buffer(rdi, rbx, 8, bdst, 1);
}

/*
procedure Copy64()
    requires/ensures
        rsi + 64 <= rdi;
        forall i {Map.contains(mem, i)}:: rsi <= i < rsi + 64 && (i - rsi) % 8 == 0 ==> Map.contains(mem, i);
        forall i {Map.contains(mem, i)}:: rdi <= i < rdi + 64 && (i - rdi) % 8 == 0 ==> Map.contains(mem, i);
    ensures
        forall i :: 0 <= i && i < 64 && i % 8 == 0 ==> mem[rdi + i] == mem[rsi + i];
    reads
        rsi; rdi;
    modifies
        rax; rbx; rcx; rdx; rbp;
        mem;
{
    assert{:fast_block} true;
    Load64(rax, rsi, 0);
    Load64(rbx, rsi, 8);
    Load64(rcx, rsi, 16);
    Load64(rdx, rsi, 24);
    Load64(rbp, rsi, 32);
    Store64(rdi, rax, 0);
    Store64(rdi, rbx, 8);
    Store64(rdi, rcx, 16);
    Store64(rdi, rdx, 24);
    Store64(rdi, rbp, 32);
    Load64(rax, rsi, 40);
    Load64(rbx, rsi, 48);
    Load64(rcx, rsi, 56);
    Store64(rdi, rax, 40);
    Store64(rdi, rbx, 48);
    Store64(rdi, rcx, 56);
}

procedure Copy128()
    requires/ensures
        rsi + 128 <= rdi;
        forall i {Map.contains(mem, i)}:: rsi <= i < rsi + 128 && (i - rsi) % 8 == 0 ==> Map.contains(mem, i);
        forall i {Map.contains(mem, i)}:: rdi <= i < rdi + 128 && (i - rdi) % 8 == 0 ==> Map.contains(mem, i);
    ensures
        forall i :: 0 <= i && i < 128 && i % 8 == 0 ==> mem[rdi + i] == mem[rsi + i];
    reads
        rsi; rdi;
    modifies
        rax; rbx; rcx; rdx; rbp;
        mem;
{
    assert{:fast_block} true;
    Load64(rax, rsi, 0);
    Load64(rbx, rsi, 8);
    Load64(rcx, rsi, 16);
    Load64(rdx, rsi, 24);
    Load64(rbp, rsi, 32);
    Store64(rdi, rax, 0);
    Store64(rdi, rbx, 8);
    Store64(rdi, rcx, 16);
    Store64(rdi, rdx, 24);
    Store64(rdi, rbp, 32);
    Load64(rax, rsi, 40);
    Load64(rbx, rsi, 48);
    Load64(rcx, rsi, 56);
    Load64(rdx, rsi, 64);
    Load64(rbp, rsi, 72);
    Store64(rdi, rax, 40);
    Store64(rdi, rbx, 48);
    Store64(rdi, rcx, 56);
    Store64(rdi, rdx, 64);
    Store64(rdi, rbp, 72);
    Load64(rax, rsi, 80);
    Load64(rbx, rsi, 88);
    Load64(rcx, rsi, 96);
    Load64(rdx, rsi, 104);
    Load64(rbp, rsi, 112);
    Store64(rdi, rax, 80);
    Store64(rdi, rbx, 88);
    Store64(rdi, rcx, 96);
    Store64(rdi, rdx, 104);
    Store64(rdi, rbp, 112);
    Load64(rax, rsi, 120);
    Store64(rdi, rax, 120);
}
*/
